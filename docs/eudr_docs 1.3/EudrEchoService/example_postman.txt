Before you go on please find this java script provided by my colleagues, so far it helped many users to pass the CF1 tests.
It can be used as pre-script in postman.   
Header:

    <soapenv:Header>
		<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" 
						   xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsu:Timestamp wsu:Id="TS-FC74784C4EFD20748F17171497363004">
                <wsu:Created>{{wsse_created}}</wsu:Created>
                <wsu:Expires>{{wsse_expires}}</wsu:Expires>
            </wsu:Timestamp>
            <wsse:UsernameToken wsu:Id="UsernameToken-FC74784C4EFD20748F17171497363003">
                <wsse:Username>{{wsse_username}}</wsse:Username>
                <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest">{{wsse_passwordDigest}}</wsse:Password>
                <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">{{wsse_nonce}}</wsse:Nonce>
                <wsu:Created>{{wsse_created}}</wsu:Created>
            </wsse:UsernameToken>
        </wsse:Security>
        <v4:WebServiceClientId>eudr-repository</v4:WebServiceClientId>
    </soapenv:Header>


Pre-script:

const crypto = require('crypto-js');

// Generate Nonce
function generateNonce() {
    return crypto.lib.WordArray.random(16).toString(crypto.enc.Base64);
}

// Get current timestamp in UTC format
function getCreated() {
    return new Date().toISOString();
}

// Generate Expires timestamp (10 seconds after Created)
function getExpires(created) {
    const createdDate = new Date(created);
    createdDate.setSeconds(createdDate.getSeconds() + 10); // Set expiration to 10 seconds later
    return createdDate.toISOString();
}

// Generate Password Digest
function generatePasswordDigest(nonce, created, password) {
    const nonce64 = crypto.enc.Base64.parse(nonce);
    const hash = crypto.SHA1(nonce64.concat(crypto.enc.Utf8.parse(created)).concat(crypto.enc.Utf8.parse(password)));
    return hash.toString(crypto.enc.Base64);
}

// Define username and password
const username = 'username';
const password = 'password';

// Generate values
const nonce = generateNonce();
const created = getCreated();
const expires = getExpires(created);
const passwordDigest = generatePasswordDigest(nonce, created, password);

// Set environment variables to use in the request body (postman variables)
pm.environment.set('wsse_username', username);
pm.environment.set('wsse_nonce', nonce);
pm.environment.set('wsse_created', created);
pm.environment.set('wsse_expires', expires);
pm.environment.set('wsse_passwordDigest', passwordDigest);
